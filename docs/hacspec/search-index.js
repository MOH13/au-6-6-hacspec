var searchIndex = JSON.parse('{\
"hacspec_schnorr_sig_secp256k1_sha256":{"doc":"An implementation of Schnorr signatures in the hacspec …","t":[5,5,5,5,5,5,5,5,5,5,5,5,5],"n":["batch_verification","check_ti_match_Ri","compute_a_values","compute_agg_R","compute_agg_pk","compute_agg_s","compute_own_s","concat_byte_seqs_to_single_byte_seq","multi_sig_verify","public_keys_to_byte_seqs","sign","valid_As","verify"],"q":["hacspec_schnorr_sig_secp256k1_sha256","","","","","","","","","","","",""],"d":["Verifies a batch of signatures and corresponding messages …","Hashes the points in R_seq and checks them against t. …","Helper method that computes the ‘a’ values in the …","Computes the aggregate point of all random points used in …","Computes the “aggregate” public key from the signers …","","Computes the specific signer’s s value","Helper method that transforms a sequence of byte sequences …","","Helper method that transforms a sequence of Affine points …","Creates a Schnorr signature for a single signer.","","Given a public key and a message, this method verifies the …"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[[[["seq",3,[["byteseq",6]]],["seq",3,[["affine",6]]],["seq",3],["seq",3,[["secp256k1scalar",3]]]],["bool",15]],[[["seq",3,[["sha256digest",3]]],["seq",3,[["affine",6]]]],["bool",15]],[[["seq",3]],["seq",3,[["sha256digest",3]]]],[[["seq",3]],["affine",6]],[[["seq",3],["seq",3]],["affine",6]],[[["seq",3,[["secp256k1scalar",3]]]],["secp256k1scalar",3]],[[["secp256k1scalar",3],["affine",6],["affine",6],["byteseq",6],["seq",3],["secp256k1scalar",3]],["secp256k1scalar",3]],[[["seq",3]],["byteseq",6]],[[["seq",3,[["affine",6]]],["byteseq",6]],["bool",15]],[[["seq",3]],["seq",3,[["byteseq",6]]]],[[["secp256k1scalar",3],["affine",6],["secp256k1scalar",3],["byteseq",6]]],[[["seq",3]],["bool",15]],[[["affine",6],["byteseq",6]],["bool",15]]],"p":[]},\
"hacspec_secp256k1":{"doc":"An implementation of the secp256k1 curve in the hacspec …","t":[6,3,5,5,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Affine","FieldCanvas","GENERATOR","INFINITY","ONE","ONE","ONE","ONE","ScalarCanvas","Secp256k1FieldElement","Secp256k1Scalar","TWO","TWO","TWO","TWO","ZERO","ZERO","ZERO","ZERO","absolute","absolute","absolute","absolute","add","add","add","add","add_mod","add_mod","add_mod","add_mod","add_points","batch_scalar_multiplication","bit","bit","bit","bit","bitand","bitand","bitand","bitand","bitor","bitor","bitor","bitor","bitxor","bitxor","bitxor","bitxor","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","comp_eq","comp_eq","comp_eq","comp_eq","comp_gt","comp_gt","comp_gt","comp_gt","comp_gte","comp_gte","comp_gte","comp_gte","comp_lt","comp_lt","comp_lt","comp_lt","comp_lte","comp_lte","comp_lte","comp_lte","comp_ne","comp_ne","comp_ne","comp_ne","declassify","declassify","default","default","default","default","div","div","div","div","divide","divide","divide","divide","double_point","eq","eq","eq","eq","equal","equal","equal","equal","equal_bm","equal_bm","equal_bm","equal_bm","exp","exp","exp","exp","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_byte_seq_be","from_byte_seq_be","from_byte_seq_be","from_byte_seq_be","from_byte_seq_le","from_byte_seq_le","from_canvas","from_canvas","from_hex","from_hex","from_hex","from_hex","from_hex_string","from_hex_string","from_hex_string","from_hex_string","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_literal","from_literal","from_literal","from_literal","from_literal","from_literal","from_literal","from_literal","from_public_byte_seq_be","from_public_byte_seq_be","from_public_byte_seq_be","from_public_byte_seq_be","from_public_byte_seq_le","from_public_byte_seq_le","from_secret_literal","from_secret_literal","from_signed_literal","from_signed_literal","from_signed_literal","from_signed_literal","get_bit","get_bit","get_bit","get_bit","greater_than","greater_than","greater_than","greater_than","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_qual","greater_than_or_qual","greater_than_or_qual","greater_than_or_qual","into","into","into","into","into","into","into","into","into","into","into_canvas","into_canvas","inv","inv","inv","inv","inv","inv","inv","inv","is_infinity","is_point_on_curve","less_than","less_than","less_than","less_than","less_than_bm","less_than_bm","less_than_bm","less_than_bm","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","max","max","max_val","max_val","max_val","max_val","max_value","max_value","modulo","modulo","modulo","modulo","mul","mul","mul","mul","mul_mod","mul_mod","mul_mod","mul_mod","neg","neg","neg_point","not","not","not","not","not_equal_bm","not_equal_bm","not_equal_bm","not_equal_bm","partial_cmp","partial_cmp","partial_cmp","partial_cmp","pow","pow","pow","pow","pow2","pow2","pow2","pow2","pow_felem","pow_felem","pow_felem","pow_felem","pow_mod","pow_mod","pow_mod","pow_mod","pow_self","pow_self","pow_self","pow_self","rem","rem","rem","rem","rotate_left","rotate_left","rotate_left","rotate_left","rotate_right","rotate_right","rotate_right","rotate_right","scalar_multiplication","set","set","set","set","set_bit","set_bit","set_bit","set_bit","shl","shl","shl","shl","shr","shr","shr","shr","signed_modulo","signed_modulo","signed_modulo","signed_modulo","sub","sub","sub","sub","sub_mod","sub_mod","sub_mod","sub_mod","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_byte_seq_be","to_byte_seq_be","to_byte_seq_be","to_byte_seq_be","to_byte_seq_le","to_byte_seq_le","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_owned","to_owned","to_owned","to_owned","to_public_byte_seq_be","to_public_byte_seq_be","to_public_byte_seq_le","to_public_byte_seq_le","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","wrap_add","wrap_add","wrap_add","wrap_add","wrap_div","wrap_div","wrap_div","wrap_div","wrap_mul","wrap_mul","wrap_mul","wrap_mul","wrap_sub","wrap_sub","wrap_sub","wrap_sub"],"q":["hacspec_secp256kd":["Represents a point in affine coordinates. The point at …","","Returns the base point, G, for the Secp256k1 curve in …","Generates an affine representation of point at infinity …","","","","","","","","","","","","","","","","<code>|self|</code>","<code>|self|</code>","<code>|self|</code>","<code>|self|</code>","","","","","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","Adds two arbitrary points in affine coordinates.","Calculates the sum a_1 * P_1 + … + a_i * P_i + … + A_m …","Gets the <code>i</code>-th least significant bit of this integer.","Gets the <code>i</code>-th least significant bit of this integer.","Gets the <code>i</code>-th least significant bit of this integer.","Gets the <code>i</code>-th least significant bit of this integer.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Produces a new integer which is all ones if the two …","","Produces a new integer which is all ones if the two …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","","","","","","","","","","","Division.","Division.","Division.","Division.","Doubles the given point in affine coordinates.","","","","","","","","","","","","","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get bit <code>i</code> of this integer.","Get bit <code>i</code> of this integer.","Get bit <code>i</code> of this integer.","Get bit <code>i</code> of this integer.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Invert self modulo n.","","Invert self modulo n. <strong>NOTE:</strong> <code>n</code> is ignored and inversion is …","","Invert self modulo n.","","","Invert self modulo n. <strong>NOTE:</strong> <code>n</code> is ignored and inversion is …","Checks whether the given point is the point at infinity.","Checks if the given point is a valid point on the curve.","","","","","","","","","","","","","","","","","","","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","","","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","","","","","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","Negate the value modulo max: <code>mod_value - self</code>","Negate the value modulo max: <code>mod_value - self</code>","Negates the given point in affine coordinates.","","","","","","","","","","","","","Returns self to the power of the argument. The exponent is …","Returns self to the power of the argument. The exponent is …","Returns self to the power of the argument. The exponent is …","Returns self to the power of the argument. The exponent is …","Returns 2 to the power of the argument","Returns 2 to the power of the argument","Returns 2 to the power of the argument","Returns 2 to the power of the argument","","","","","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","","","","","","","","","","","","","Performs scalar multiplication on the given point in …","Set bit <code>pos</code> of this integer to bit <code>yi</code> of integer <code>y</code>.","Set bit <code>pos</code> of this integer to bit <code>yi</code> of integer <code>y</code>.","Set bit <code>pos</code> of this integer to bit <code>yi</code> of integer <code>y</code>.","Set bit <code>pos</code> of this integer to bit <code>yi</code> of integer <code>y</code>.","Set bit <code>i</code> of this integer to <code>b</code> and return the result. Bit <code>b</code>…","Set bit <code>i</code> of this integer to <code>b</code> and return the result. Bit <code>b</code>…","Set bit <code>i</code> of this integer to <code>b</code> and return the result. Bit <code>b</code>…","Set bit <code>i</code> of this integer to <code>b</code> and return the result. Bit <code>b</code>…","","","","","","","","","<code>self % n</code> that always returns a positive integer","<code>self % n</code> that always returns a positive integer","<code>self % n</code> that always returns a positive integer","<code>self % n</code> that always returns a positive integer","","","","","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,1,2,3,4,0,0,0,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,0,0,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,2,4,1,2,3,4,1,2,3,4,1,2,3,4,0,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,1,1,2,2,2,3,3,3,4,4,4,1,1,1,2,2,3,3,3,4,4,1,2,3,4,1,2,3,4,2,4,2,4,1,2,3,4,1,2,3,4,1,2,3,4,1,1,2,2,3,3,4,4,1,2,3,4,2,4,2,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,1,1,2,2,3,3,3,4,4,2,4,1,1,2,2,3,3,4,4,0,0,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,2,4,1,2,3,4,1,3,1,2,3,4,1,2,3,4,1,2,3,4,2,4,0,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,0,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,2,4,1,2,3,4,1,2,3,4,2,4,2,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4],"f":[null,null,[[],["affine",6]],[[],["affine",6]],[[]],[[]],[[]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["fieldcanvas",3]],["fieldcanvas",3]],[[["secp256k1fieldelement",3]],["secp256k1fieldelement",3]],[[["scalarcanvas",3]],["scalarcanvas",3]],[[["secp256k1scalar",3]],["secp256k1scalar",3]],[[]],[[]],[[]],[[]],[[["affine",6],["affine",6]],["affine",6]],[[["seq",3]],["affine",6]],[[["usize",15]],["bool",15]],[[["usize",15]],["bool",15]],[[["usize",15]],["bool",15]],[[["usize",15]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["fieldcanvas",3]],[[],["secp256k1fieldelement",3]],[[],["scalarcanvas",3]],[[],["secp256k1scalar",3]],[[]],[[]],[[]],[[]],[[["fieldcanvas",3]],["ordering",4]],[[],["ordering",4]],[[["scalarcanvas",3]],["ordering",4]],[[],["ordering",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bigint",3]],[[],["bigint",3]],[[],["fieldcanvas",3]],[[],["secp256k1fieldelement",3]],[[],["scalarcanvas",3]],[[],["secp256k1scalar",3]],[[["fieldcanvas",3]],["fieldcanvas",3]],[[["secp256k1fieldelement",3]],["secp256k1fieldelement",3]],[[["scalarcanvas",3]],["scalarcanvas",3]],[[["secp256k1scalar",3]],["secp256k1scalar",3]],[[]],[[]],[[]],[[]],[[["affine",6]],["affine",6]],[[["fieldcanvas",3]],["bool",15]],[[],["bool",15]],[[["scalarcanvas",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["biguint",3]],["fieldcanvas",3]],[[["bigint",3]],["fieldcanvas",3]],[[["fieldcanvas",3]],["secp256k1fieldelement",3]],[[]],[[["bigint",3]],["scalarcanvas",3]],[[["biguint",3]],["scalarcanvas",3]],[[]],[[]],[[["scalarcanvas",3]],["secp256k1scalar",3]],[[]],[[]],[[]],[[]],[[],["fieldcanvas",3]],[[],["secp256k1fieldelement",3]],[[],["scalarcanvas",3]],[[],["secp256k1scalar",3]],[[["seqtrait",8,[["u8",3]]]],["secp256k1fieldelement",3]],[[["seqtrait",8,[["u8",3]]]],["secp256k1scalar",3]],[[["fieldcanvas",3]],["secp256k1fieldelement",3]],[[["scalarcanvas",3]],["secp256k1scalar",3]],[[["str",15]]],[[["str",15]]],[[["str",15]]],[[["str",15]]],[[["string",3]]],[[["string",3]]],[[["string",3]]],[[["string",3]]],[[]],[[]],[[]],[[]],[[["u128",15]]],[[["u128",15]]],[[["u128",15]]],[[["u128",15]]],[[["u128",15]]],[[["u128",15]]],[[["u128",15]]],[[["u128",15]]],[[["seqtrait",8,[["u8",15]]]],["fieldcanvas",3]],[[["seqtrait",8,[["u8",15]]]],["secp256k1fieldelement",3]],[[["seqtrait",8,[["u8",15]]]],["scalarcanvas",3]],[[["seqtrait",8,[["u8",15]]]],["secp256k1scalar",3]],[[["seqtrait",8,[["u8",15]]]],["secp256k1fieldelement",3]],[[["seqtrait",8,[["u8",15]]]],["secp256k1scalar",3]],[[["u128",3]],["secp256k1fieldelement",3]],[[["u128",3]],["secp256k1scalar",3]],[[["i128",15]]],[[["i128",15]]],[[["i128",15]]],[[["i128",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[],["bigint",3]],[[],["biguint",3]],[[]],[[],["fieldcanvas",3]],[[]],[[],["bigint",3]],[[],["biguint",3]],[[]],[[],["scalarcanvas",3]],[[],["fieldcanvas",3]],[[],["scalarcanvas",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["affine",6]],["bool",15]],[[["affine",6]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[],["fieldcanvas",3]],[[],["scalarcanvas",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["fieldcanvas",3]],["fieldcanvas",3]],[[["secp256k1fieldelement",3]],["secp256k1fieldelement",3]],[[["scalarcanvas",3]],["scalarcanvas",3]],[[["secp256k1scalar",3]],["secp256k1scalar",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["affine",6]],["affine",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["fieldcanvas",3]],["option",4,[["ordering",4]]]],[[],["option",4,[["ordering",4]]]],[[["scalarcanvas",3]],["option",4,[["ordering",4]]]],[[],["option",4,[["ordering",4]]]],[[["u128",15]]],[[["u128",15]]],[[["u128",15]]],[[["u128",15]]],[[["usize",15]],["fieldcanvas",3]],[[["usize",15]],["secp256k1fieldelement",3]],[[["usize",15]],["scalarcanvas",3]],[[["usize",15]],["secp256k1scalar",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["fieldcanvas",3]],["fieldcanvas",3]],[[["secp256k1fieldelement",3]],["secp256k1fieldelement",3]],[[["scalarcanvas",3]],["scalarcanvas",3]],[[["secp256k1scalar",3]],["secp256k1scalar",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["secp256k1scalar",3],["affine",6]],["affine",6]],[[["usize",15],["usize",15]]],[[["usize",15],["usize",15]]],[[["usize",15],["usize",15]]],[[["usize",15],["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[["fieldcanvas",3]],["fieldcanvas",3]],[[["secp256k1fieldelement",3]],["secp256k1fieldelement",3]],[[["scalarcanvas",3]],["scalarcanvas",3]],[[["secp256k1scalar",3]],["secp256k1scalar",3]],[[]],[[]],[[]],[[]],[[]],[[],["vec",3,[["u8",15]]]],[[]],[[],["vec",3,[["u8",15]]]],[[],["seq",3,[["u8",3]]]],[[],["seq",3,[["u8",3]]]],[[],["seq",3,[["u8",3]]]],[[],["seq",3,[["u8",3]]]],[[],["seq",3,[["u8",3]]]],[[],["seq",3,[["u8",3]]]],[[]],[[],["vec",3,[["u8",15]]]],[[]],[[],["vec",3,[["u8",15]]]],[[]],[[]],[[]],[[]],[[],["seq",3,[["u8",15]]]],[[],["seq",3,[["u8",15]]]],[[],["seq",3,[["u8",15]]]],[[],["seq",3,[["u8",15]]]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]]],"p":[[3,"FieldCanvas"],[3,"Secp256k1FieldElement"],[3,"ScalarCanvas"],[3,"Secp256k1Scalar"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};